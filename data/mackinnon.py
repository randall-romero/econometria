# RETURNS MACKINNON 2010 CRITICAL VALUES FOR COINTEGRATION TESTS

import numpy as np
import pandas as pd
from io import StringIO

pd.set_option('precision',5)



#================================================================================
# MacKinnon 2010 Critical Values for Cointegration Tests

# This file contains tables 2, 3, and 4 from the appendix.  Table 2 has been split into two tables ('nc_table' and 'c_table').
# The tables in this file are read by the class below to compute the critical values depending on
#
#    - the number of time series,
#    - the number of observations, and
#    - the inclusion of a constant, a linear trend, and a quadratic trend.



nc_table = StringIO("""N,Level,Obs,beta_inf,se,beta1,beta2,beta3
1,1%,15000,-2.57,0.000110,-2.24,-3.63,0.00
1,5%,15000,-1.94,0.000074,-0.27,-3.37,31.22
1,10%,15000,-1.62,0.000059,0.27,-2.71,25.36
""")

c_table = StringIO("""N,Level,Obs,beta_inf,se,beta1,beta2,beta3
1.0,1%,15000,-3.43,0.000127,-6.54,-16.79,-79.43
1.0,5%,15000,-2.86,0.000068,-2.89,-4.23,-40.04
1.0,10%,15000,-2.57,0.000043,-1.54,-2.81,0.00
2.0,1%,15000,-3.90,0.000102,-10.95,-22.53,0.00
2.0,5%,15000,-3.34,0.000056,-6.11,-6.82,0.00
2.0,10%,15000,-3.04,0.000044,-4.24,-2.72,0.00
3.0,1%,15000,-4.29,0.000123,-14.44,-33.20,47.43
3.0,5%,15000,-3.74,0.000067,-8.56,-10.85,27.98
3.0,10%,15000,-3.45,0.000043,-6.21,-3.72,0.00
4.0,1%,15000,-4.64,0.000101,-18.10,-37.97,0.00
4.0,5%,15000,-4.10,0.000055,-11.23,-11.18,0.00
4.0,10%,15000,-3.81,0.000043,-8.39,-4.14,0.00
5.0,1%,15000,-4.96,0.000101,-21.89,-45.14,0.00
5.0,5%,15000,-4.42,0.000055,-14.04,-12.58,0.00
5.0,10%,15000,-4.13,0.000043,-10.74,-3.78,0.00
6.0,1%,15000,-5.25,0.000124,-25.67,-57.74,88.64
6.0,5%,15000,-4.71,0.000068,-16.92,-17.49,60.01
6.0,10%,15000,-4.43,0.000054,-13.19,-5.10,27.88
7.0,1%,15000,-5.51,0.000126,-29.58,-69.40,164.30
7.0,5%,15000,-4.98,0.000068,-19.90,-22.05,110.76
7.0,10%,15000,-4.70,0.000054,-15.73,-6.92,67.72
8.0,1%,15000,-5.76,0.000126,-33.53,-82.19,256.29
8.0,5%,15000,-5.23,0.000068,-23.00,-24.65,144.48
8.0,10%,15000,-4.95,0.000053,-18.40,-7.34,94.87
9.0,1%,15000,-6.00,0.000126,-37.66,-87.37,248.32
9.0,5%,15000,-5.47,0.000069,-26.21,-26.63,176.38
9.0,10%,14500,-5.19,0.000062,-21.14,-9.48,172.70
10.0,1%,15000,-6.22,0.000128,-41.72,-102.68,389.33
10.0,5%,15000,-5.69,0.000068,-29.45,-30.99,251.02
10.0,10%,15000,-5.42,0.000054,-24.00,-7.51,163.05
11.0,1%,14500,-6.43,0.000145,-46.01,-106.81,352.75
11.0,5%,15000,-5.91,0.000068,-32.83,-30.28,249.99
11.0,10%,15000,-5.63,0.000055,-26.97,-4.08,151.43
12.0,1%,15000,-6.64,0.000127,-50.21,-124.16,579.62
12.0,5%,15000,-6.11,0.000069,-36.27,-32.51,314.80
12.0,10%,15000,-5.84,0.000054,-29.99,-2.69,184.12
""")

ct_table = StringIO("""N,Level,Obs,beta_inf,se,beta1,beta2,beta3
1,1%,-3.96,0.000122,-9.05,-28.43,-134.16
1,5%,-3.41,0.000066,-4.39,-9.04,-45.37
1,10%,-3.13,0.000051,-2.59,-3.93,-22.38
2,1%,-4.33,0.000099,-15.44,-35.68,0.00
2,5%,-3.78,0.000054,-9.51,-12.07,0.00
2,10%,-3.50,0.000053,-7.08,-7.54,21.89
3,1%,-4.66,0.000126,-18.77,-49.79,104.24
3,5%,-4.12,0.000066,-11.89,-19.03,77.33
3,10%,-3.84,0.000053,-9.07,-8.50,35.40
4,1%,-4.97,0.000125,-22.47,-52.60,51.31
4,5%,-4.43,0.000067,-14.59,-18.23,39.65
4,10%,-4.15,0.000054,-11.25,-9.87,54.11
5,1%,-5.25,0.000123,-26.22,-59.63,50.65
5,5%,-4.72,0.000068,-17.36,-22.66,91.36
5,10%,-4.43,0.000054,-13.61,-10.24,76.78
6,1%,-5.52,0.000125,-29.98,-75.22,202.25
6,5%,-4.98,0.000066,-20.31,-25.22,132.03
6,10%,-4.70,0.000053,-16.13,-9.84,94.27
7,1%,-5.77,0.000125,-33.92,-84.31,245.39
7,5%,-5.23,0.000067,-23.33,-28.96,182.34
7,10%,-4.95,0.000054,-18.74,-10.17,120.58
8,1%,-6.00,0.000126,-37.89,-96.43,335.92
8,5%,-5.47,0.000068,-26.48,-31.03,220.17
8,10%,-5.19,0.000054,-21.43,-10.73,157.96
9,1%,-6.22,0.000125,-41.95,-109.88,466.07
9,5%,-5.69,0.000069,-29.72,-33.78,273.00
9,10%,-5.42,0.000054,-24.29,-8.58,169.89
10,1%,-6.44,0.000127,-46.12,-120.81,566.82
10,5%,-5.91,0.000069,-33.03,-37.21,346.19
10,10%,14500,-5.63,0.000063,-27.20,-6.79,177.67
11,1%,-6.64,0.000125,-50.43,-129.00,642.78
11,5%,-6.11,0.000069,-36.46,-36.25,348.55
11,10%,-5.84,0.000055,-30.20,-5.16,210.34
12,1%,-6.83,0.000126,-54.71,-139.80,736.38
12,5%,-6.31,0.000068,-39.97,-37.02,406.05
12,10%,14000,-6.04,0.000074,-33.24,-6.61,317.78
""")

ctt_table = StringIO("""N,Level,Obs,beta_inf,se,beta1,beta2,beta3
1,1%,15000,-4.37,0.000123,-11.59,-35.82,-334.05
1,5%,15000,-3.83,0.000065,-5.91,-12.49,-118.28
1,10%,15000,-3.55,0.000051,-3.66,-5.29,-63.56
2,1%,15000,-4.69,0.000124,-20.23,-64.92,88.88
2,5%,15000,-4.15,0.000067,-13.31,-28.40,72.74
2,10%,15000,-3.87,0.000052,-10.46,-17.41,66.31
3,1%,15000,-4.99,0.000125,-23.59,-76.92,184.78
3,5%,15000,-4.45,0.000068,-15.77,-32.32,122.71
3,10%,15000,-4.17,0.000053,-12.49,-17.91,83.29
4,1%,15000,-5.27,0.000125,-27.28,-78.97,137.87
4,5%,15000,-4.73,0.000069,-18.48,-31.88,111.82
4,10%,15000,-4.45,0.000053,-14.72,-17.97,101.92
5,1%,15000,-5.53,0.000125,-30.91,-92.49,248.10
5,5%,15000,-4.99,0.000068,-21.24,-37.69,194.21
5,10%,15000,-4.72,0.000054,-17.08,-18.63,136.67
6,1%,15000,-5.77,0.000126,-34.70,-105.94,393.99
6,5%,15000,-5.24,0.000067,-24.22,-39.15,232.53
6,10%,15000,-4.96,0.000054,-19.61,-18.86,174.92
7,1%,15000,-6.01,0.000125,-38.74,-108.61,365.21
7,5%,15000,-5.48,0.000067,-27.30,-39.50,246.92
7,10%,14500,-5.20,0.000062,-22.26,-17.91,208.49
8,1%,14500,-6.23,0.000143,-42.72,-119.62,421.40
8,5%,15000,-5.70,0.000067,-30.44,-44.30,345.48
8,10%,15000,-5.42,0.000054,-24.97,-19.69,274.46
9,1%,15000,-6.44,0.000125,-46.76,-136.69,651.38
9,5%,15000,-5.91,0.000069,-33.76,-42.69,346.63
9,10%,15000,-5.64,0.000054,-27.90,-13.88,236.98
10,1%,15000,-6.64,0.000125,-50.98,-145.46,752.23
10,5%,15000,-6.12,0.000070,-37.06,-48.72,473.91
10,10%,15000,-5.84,0.000054,-30.81,-14.94,316.01
11,1%,14500,-6.84,0.000145,-55.29,-152.65,792.58
11,5%,15000,-6.31,0.000069,-40.55,-46.77,487.19
11,10%,14500,-6.04,0.000062,-33.90,-9.12,285.16
12,1%,15000,-7.03,0.000124,-59.60,-166.37,989.88
12,5%,15000,-6.50,0.000070,-44.08,-47.24,543.89
12,10%,14500,-6.23,0.000063,-36.97,-10.87,418.41
""")




#================================================================================
# La clase MacKinnon
# Las tablas de MacKinnon están almacenadas arriba, convertimos a Pandas cuando creamos la clase MacKinnon.


class MacKinnon:
    variants = {'nc': 'No constant term',
                'c': 'Constant term',
                'ct': 'Constant and linear trend',
                'ctt': 'Constant, linear trend and quadratic trend'}

    tables = dict(nc  = pd.read_csv(nc_table, header=0),
                  c   = pd.read_csv(c_table, header=0),
                  ct  = pd.read_csv(ct_table, header=0),
                  ctt = pd.read_csv(ctt_table, header=0))


    def get_matrix(self, variant, N, level=None):
        '''
        get_matrix(self, variant, N, level=None)
        
        Retorna la parte relevante de la tabla de MacKinnon para una prueba
        de cointegración de N series, con la variante especificada ('nc', 'c', 
        'ct', o 'ctt'). 
        
        Opcionalmente, si además se especifica el nivel de la prueba ('1%', '5%' 
        o '10%'), se retorna un vector con los betas requeridos.
        
        En ambos casos, los betas están ordenados de mayor orden a menor; esto 
        facilita la evaluación posterior del polinomio usando np.polyval
        '''
        
        dd = self.tables[variant]
        temp = dd[dd.N == N][['Level', 'beta3', 'beta2', 'beta1', 'beta_inf']]
        temp.set_index('Level', drop=True, inplace=True)
        
        return temp.loc[level] if level else temp

    def __call__(self, variant, N, T, level=None):
        '''
        Retorna los valores críticos de MacKinnon para una prueba de cointegración
        de N series, con la variante especificada ('nc', 'c', 'ct', o 'ctt'). 
        
        Opcionalmente, si además se especifica el nivel de la prueba ('1%', '5%' 
        o '10%'), se retorna unícamente el escalar requerido.
        '''
        beta = self.get_matrix(variant, N, level)
        if level:
            return np.polyval(beta, 1/T)
        else:
            values = [np.polyval(k, 1/T) for k in beta.values]
            return pd.Series(values, index=beta.index)