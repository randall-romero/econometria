Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "C:\ProgramData\Anaconda3\lib\asyncio\base_events.py", line 642, in run_until_complete
    return future.result()
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
greene_file = 'http://www.stern.nyu.edu/~wgreene/Text/Edition7/TableF2-2.csv'
gasdata = pd.read_csv(greene_file, parse_dates=True, index_col=0)

gasdata.eval('G = GASEXP/GASP', inplace=True)
gasdata.eval('GPC = 1e6*G/POP', inplace=True)
gasdata['t'] = np.exp(gasdata.index.year - 1952)

series = {
    'GASEXP'    : 'Total U.S. gasoline expenditure',
    'GASP'      : 'precio combustible',
    'INCOME'    : 'ingreso per capita',
    'PNC'       : 'precio carro nuevo',
    'PUC'       : 'precio carro nuevo',
    'POP'       : 'U.S. total population in thousands',
    'GPC'       : 'Consumo per capita',
    'Intercept' : 'intercepto',
    't'         : 'tendencia'
}

params = pd.DataFrame()
signif = pd.DataFrame()
stats = pd.DataFrame(index=['S', '$R^2$', 'T', 'k'])

samples = {'1953-2004': slice('1953','2004'),
           '1953-1973': slice('1953','1973'),
           '1974-2004': slice('1974','2004')}


for periodo, ss in samples.items():
    mm = ols('GPC ~ INCOME + GASP + PNC + PUC + t', np.log(gasdata)[ss]).fit()
    params[periodo] = mm.params
    signif[periodo] = ['âœ“' if p < 0.05 else '' for p in mm.pvalues]
    stats[periodo] = [mm.ssr, mm.rsquared, mm.nobs, mm.params.shape[0]]

params.rename(index=series)
signif.index = params.index

pd.concat([params.round(4), signif], keys=['coef ', 'p<0.05']).unstack(0)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mSSLCertVerificationError[0m                  Traceback (most recent call last)
[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36mdo_open[1;34m(self, http_class, req, **http_conn_args)[0m
[0;32m   1345[0m             [1;32mtry[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1346[1;33m                 h.request(req.get_method(), req.selector, req.data, headers,
[0m[0;32m   1347[0m                           encode_chunked=req.has_header('Transfer-encoding'))

[1;32mC:\ProgramData\Anaconda3\lib\http\client.py[0m in [0;36mrequest[1;34m(self, method, url, body, headers, encode_chunked)[0m
[0;32m   1278[0m         [1;34m"""Send a complete request to the server."""[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1279[1;33m         [0mself[0m[1;33m.[0m[0m_send_request[0m[1;33m([0m[0mmethod[0m[1;33m,[0m [0murl[0m[1;33m,[0m [0mbody[0m[1;33m,[0m [0mheaders[0m[1;33m,[0m [0mencode_chunked[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1280[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\http\client.py[0m in [0;36m_send_request[1;34m(self, method, url, body, headers, encode_chunked)[0m
[0;32m   1324[0m             [0mbody[0m [1;33m=[0m [0m_encode[0m[1;33m([0m[0mbody[0m[1;33m,[0m [1;34m'body'[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1325[1;33m         [0mself[0m[1;33m.[0m[0mendheaders[0m[1;33m([0m[0mbody[0m[1;33m,[0m [0mencode_chunked[0m[1;33m=[0m[0mencode_chunked[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1326[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\http\client.py[0m in [0;36mendheaders[1;34m(self, message_body, encode_chunked)[0m
[0;32m   1273[0m             [1;32mraise[0m [0mCannotSendHeader[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1274[1;33m         [0mself[0m[1;33m.[0m[0m_send_output[0m[1;33m([0m[0mmessage_body[0m[1;33m,[0m [0mencode_chunked[0m[1;33m=[0m[0mencode_chunked[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1275[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\http\client.py[0m in [0;36m_send_output[1;34m(self, message_body, encode_chunked)[0m
[0;32m   1033[0m         [1;32mdel[0m [0mself[0m[1;33m.[0m[0m_buffer[0m[1;33m[[0m[1;33m:[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1034[1;33m         [0mself[0m[1;33m.[0m[0msend[0m[1;33m([0m[0mmsg[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1035[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\http\client.py[0m in [0;36msend[1;34m(self, data)[0m
[0;32m    973[0m             [1;32mif[0m [0mself[0m[1;33m.[0m[0mauto_open[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 974[1;33m                 [0mself[0m[1;33m.[0m[0mconnect[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    975[0m             [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\http\client.py[0m in [0;36mconnect[1;34m(self)[0m
[0;32m   1447[0m [1;33m[0m[0m
[1;32m-> 1448[1;33m             self.sock = self._context.wrap_socket(self.sock,
[0m[0;32m   1449[0m                                                   server_hostname=server_hostname)

[1;32mC:\ProgramData\Anaconda3\lib\ssl.py[0m in [0;36mwrap_socket[1;34m(self, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, session)[0m
[0;32m    499[0m         [1;31m# ctx._wrap_socket()[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 500[1;33m         return self.sslsocket_class._create(
[0m[0;32m    501[0m             [0msock[0m[1;33m=[0m[0msock[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\ssl.py[0m in [0;36m_create[1;34m(cls, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, context, session)[0m
[0;32m   1039[0m                         [1;32mraise[0m [0mValueError[0m[1;33m([0m[1;34m"do_handshake_on_connect should not be specified for non-blocking sockets"[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1040[1;33m                     [0mself[0m[1;33m.[0m[0mdo_handshake[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1041[0m             [1;32mexcept[0m [1;33m([0m[0mOSError[0m[1;33m,[0m [0mValueError[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\ssl.py[0m in [0;36mdo_handshake[1;34m(self, block)[0m
[0;32m   1308[0m                 [0mself[0m[1;33m.[0m[0msettimeout[0m[1;33m([0m[1;32mNone[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1309[1;33m             [0mself[0m[1;33m.[0m[0m_sslobj[0m[1;33m.[0m[0mdo_handshake[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1310[0m         [1;32mfinally[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;31mSSLCertVerificationError[0m: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)

During handling of the above exception, another exception occurred:

[1;31mURLError[0m                                  Traceback (most recent call last)
[1;32m~\AppData\Local\Temp/ipykernel_22792/2479014466.py[0m in [0;36m<module>[1;34m[0m
[0;32m      1[0m [0mgreene_file[0m [1;33m=[0m [1;34m'http://www.stern.nyu.edu/~wgreene/Text/Edition7/TableF2-2.csv'[0m[1;33m[0m[1;33m[0m[0m
[1;32m----> 2[1;33m [0mgasdata[0m [1;33m=[0m [0mpd[0m[1;33m.[0m[0mread_csv[0m[1;33m([0m[0mgreene_file[0m[1;33m,[0m [0mparse_dates[0m[1;33m=[0m[1;32mTrue[0m[1;33m,[0m [0mindex_col[0m[1;33m=[0m[1;36m0[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m      3[0m [1;33m[0m[0m
[0;32m      4[0m [0mgasdata[0m[1;33m.[0m[0meval[0m[1;33m([0m[1;34m'G = GASEXP/GASP'[0m[1;33m,[0m [0minplace[0m[1;33m=[0m[1;32mTrue[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m      5[0m [0mgasdata[0m[1;33m.[0m[0meval[0m[1;33m([0m[1;34m'GPC = 1e6*G/POP'[0m[1;33m,[0m [0minplace[0m[1;33m=[0m[1;32mTrue[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\util\_decorators.py[0m in [0;36mwrapper[1;34m(*args, **kwargs)[0m
[0;32m    309[0m                     [0mstacklevel[0m[1;33m=[0m[0mstacklevel[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    310[0m                 )
[1;32m--> 311[1;33m             [1;32mreturn[0m [0mfunc[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    312[0m [1;33m[0m[0m
[0;32m    313[0m         [1;32mreturn[0m [0mwrapper[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36mread_csv[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)[0m
[0;32m    584[0m     [0mkwds[0m[1;33m.[0m[0mupdate[0m[1;33m([0m[0mkwds_defaults[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    585[0m [1;33m[0m[0m
[1;32m--> 586[1;33m     [1;32mreturn[0m [0m_read[0m[1;33m([0m[0mfilepath_or_buffer[0m[1;33m,[0m [0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    587[0m [1;33m[0m[0m
[0;32m    588[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m_read[1;34m(filepath_or_buffer, kwds)[0m
[0;32m    480[0m [1;33m[0m[0m
[0;32m    481[0m     [1;31m# Create the parser.[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 482[1;33m     [0mparser[0m [1;33m=[0m [0mTextFileReader[0m[1;33m([0m[0mfilepath_or_buffer[0m[1;33m,[0m [1;33m**[0m[0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    483[0m [1;33m[0m[0m
[0;32m    484[0m     [1;32mif[0m [0mchunksize[0m [1;32mor[0m [0miterator[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m__init__[1;34m(self, f, engine, **kwds)[0m
[0;32m    809[0m             [0mself[0m[1;33m.[0m[0moptions[0m[1;33m[[0m[1;34m"has_index_names"[0m[1;33m][0m [1;33m=[0m [0mkwds[0m[1;33m[[0m[1;34m"has_index_names"[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[0;32m    810[0m [1;33m[0m[0m
[1;32m--> 811[1;33m         [0mself[0m[1;33m.[0m[0m_engine[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_make_engine[0m[1;33m([0m[0mself[0m[1;33m.[0m[0mengine[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    812[0m [1;33m[0m[0m
[0;32m    813[0m     [1;32mdef[0m [0mclose[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m_make_engine[1;34m(self, engine)[0m
[0;32m   1038[0m             )
[0;32m   1039[0m         [1;31m# error: Too many arguments for "ParserBase"[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1040[1;33m         [1;32mreturn[0m [0mmapping[0m[1;33m[[0m[0mengine[0m[1;33m][0m[1;33m([0m[0mself[0m[1;33m.[0m[0mf[0m[1;33m,[0m [1;33m**[0m[0mself[0m[1;33m.[0m[0moptions[0m[1;33m)[0m  [1;31m# type: ignore[call-arg][0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1041[0m [1;33m[0m[0m
[0;32m   1042[0m     [1;32mdef[0m [0m_failover_to_python[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers\c_parser_wrapper.py[0m in [0;36m__init__[1;34m(self, src, **kwds)[0m
[0;32m     49[0m [1;33m[0m[0m
[0;32m     50[0m         [1;31m# open handles[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 51[1;33m         [0mself[0m[1;33m.[0m[0m_open_handles[0m[1;33m([0m[0msrc[0m[1;33m,[0m [0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     52[0m         [1;32massert[0m [0mself[0m[1;33m.[0m[0mhandles[0m [1;32mis[0m [1;32mnot[0m [1;32mNone[0m[1;33m[0m[1;33m[0m[0m
[0;32m     53[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers\base_parser.py[0m in [0;36m_open_handles[1;34m(self, src, kwds)[0m
[0;32m    220[0m         [0mLet[0m [0mthe[0m [0mreaders[0m [0mopen[0m [0mIOHandles[0m [0mafter[0m [0mthey[0m [0mare[0m [0mdone[0m [1;32mwith[0m [0mtheir[0m [0mpotential[0m [0mraises[0m[1;33m.[0m[1;33m[0m[1;33m[0m[0m
[0;32m    221[0m         """
[1;32m--> 222[1;33m         self.handles = get_handle(
[0m[0;32m    223[0m             [0msrc[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    224[0m             [1;34m"r"[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\common.py[0m in [0;36mget_handle[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[0;32m    607[0m [1;33m[0m[0m
[0;32m    608[0m     [1;31m# open URLs[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 609[1;33m     ioargs = _get_filepath_or_buffer(
[0m[0;32m    610[0m         [0mpath_or_buf[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    611[0m         [0mencoding[0m[1;33m=[0m[0mencoding[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\common.py[0m in [0;36m_get_filepath_or_buffer[1;34m(filepath_or_buffer, encoding, compression, mode, storage_options)[0m
[0;32m    310[0m         [1;31m# assuming storage_options is to be interpreted as headers[0m[1;33m[0m[1;33m[0m[0m
[0;32m    311[0m         [0mreq_info[0m [1;33m=[0m [0murllib[0m[1;33m.[0m[0mrequest[0m[1;33m.[0m[0mRequest[0m[1;33m([0m[0mfilepath_or_buffer[0m[1;33m,[0m [0mheaders[0m[1;33m=[0m[0mstorage_options[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 312[1;33m         [1;32mwith[0m [0murlopen[0m[1;33m([0m[0mreq_info[0m[1;33m)[0m [1;32mas[0m [0mreq[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    313[0m             [0mcontent_encoding[0m [1;33m=[0m [0mreq[0m[1;33m.[0m[0mheaders[0m[1;33m.[0m[0mget[0m[1;33m([0m[1;34m"Content-Encoding"[0m[1;33m,[0m [1;32mNone[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    314[0m             [1;32mif[0m [0mcontent_encoding[0m [1;33m==[0m [1;34m"gzip"[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\io\common.py[0m in [0;36murlopen[1;34m(*args, **kwargs)[0m
[0;32m    210[0m     [1;32mimport[0m [0murllib[0m[1;33m.[0m[0mrequest[0m[1;33m[0m[1;33m[0m[0m
[0;32m    211[0m [1;33m[0m[0m
[1;32m--> 212[1;33m     [1;32mreturn[0m [0murllib[0m[1;33m.[0m[0mrequest[0m[1;33m.[0m[0murlopen[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    213[0m [1;33m[0m[0m
[0;32m    214[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36murlopen[1;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[0;32m    212[0m     [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    213[0m         [0mopener[0m [1;33m=[0m [0m_opener[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 214[1;33m     [1;32mreturn[0m [0mopener[0m[1;33m.[0m[0mopen[0m[1;33m([0m[0murl[0m[1;33m,[0m [0mdata[0m[1;33m,[0m [0mtimeout[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    215[0m [1;33m[0m[0m
[0;32m    216[0m [1;32mdef[0m [0minstall_opener[0m[1;33m([0m[0mopener[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36mopen[1;34m(self, fullurl, data, timeout)[0m
[0;32m    521[0m         [1;32mfor[0m [0mprocessor[0m [1;32min[0m [0mself[0m[1;33m.[0m[0mprocess_response[0m[1;33m.[0m[0mget[0m[1;33m([0m[0mprotocol[0m[1;33m,[0m [1;33m[[0m[1;33m][0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    522[0m             [0mmeth[0m [1;33m=[0m [0mgetattr[0m[1;33m([0m[0mprocessor[0m[1;33m,[0m [0mmeth_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 523[1;33m             [0mresponse[0m [1;33m=[0m [0mmeth[0m[1;33m([0m[0mreq[0m[1;33m,[0m [0mresponse[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    524[0m [1;33m[0m[0m
[0;32m    525[0m         [1;32mreturn[0m [0mresponse[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36mhttp_response[1;34m(self, request, response)[0m
[0;32m    630[0m         [1;31m# request was successfully received, understood, and accepted.[0m[1;33m[0m[1;33m[0m[0m
[0;32m    631[0m         [1;32mif[0m [1;32mnot[0m [1;33m([0m[1;36m200[0m [1;33m<=[0m [0mcode[0m [1;33m<[0m [1;36m300[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 632[1;33m             response = self.parent.error(
[0m[0;32m    633[0m                 'http', request, response, code, msg, hdrs)
[0;32m    634[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36merror[1;34m(self, proto, *args)[0m
[0;32m    553[0m             [0mhttp_err[0m [1;33m=[0m [1;36m0[0m[1;33m[0m[1;33m[0m[0m
[0;32m    554[0m         [0margs[0m [1;33m=[0m [1;33m([0m[0mdict[0m[1;33m,[0m [0mproto[0m[1;33m,[0m [0mmeth_name[0m[1;33m)[0m [1;33m+[0m [0margs[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 555[1;33m         [0mresult[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_call_chain[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    556[0m         [1;32mif[0m [0mresult[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    557[0m             [1;32mreturn[0m [0mresult[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36m_call_chain[1;34m(self, chain, kind, meth_name, *args)[0m
[0;32m    492[0m         [1;32mfor[0m [0mhandler[0m [1;32min[0m [0mhandlers[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    493[0m             [0mfunc[0m [1;33m=[0m [0mgetattr[0m[1;33m([0m[0mhandler[0m[1;33m,[0m [0mmeth_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 494[1;33m             [0mresult[0m [1;33m=[0m [0mfunc[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    495[0m             [1;32mif[0m [0mresult[0m [1;32mis[0m [1;32mnot[0m [1;32mNone[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    496[0m                 [1;32mreturn[0m [0mresult[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36mhttp_error_302[1;34m(self, req, fp, code, msg, headers)[0m
[0;32m    745[0m         [0mfp[0m[1;33m.[0m[0mclose[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    746[0m [1;33m[0m[0m
[1;32m--> 747[1;33m         [1;32mreturn[0m [0mself[0m[1;33m.[0m[0mparent[0m[1;33m.[0m[0mopen[0m[1;33m([0m[0mnew[0m[1;33m,[0m [0mtimeout[0m[1;33m=[0m[0mreq[0m[1;33m.[0m[0mtimeout[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    748[0m [1;33m[0m[0m
[0;32m    749[0m     [0mhttp_error_301[0m [1;33m=[0m [0mhttp_error_303[0m [1;33m=[0m [0mhttp_error_307[0m [1;33m=[0m [0mhttp_error_302[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36mopen[1;34m(self, fullurl, data, timeout)[0m
[0;32m    515[0m [1;33m[0m[0m
[0;32m    516[0m         [0msys[0m[1;33m.[0m[0maudit[0m[1;33m([0m[1;34m'urllib.Request'[0m[1;33m,[0m [0mreq[0m[1;33m.[0m[0mfull_url[0m[1;33m,[0m [0mreq[0m[1;33m.[0m[0mdata[0m[1;33m,[0m [0mreq[0m[1;33m.[0m[0mheaders[0m[1;33m,[0m [0mreq[0m[1;33m.[0m[0mget_method[0m[1;33m([0m[1;33m)[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 517[1;33m         [0mresponse[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_open[0m[1;33m([0m[0mreq[0m[1;33m,[0m [0mdata[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    518[0m [1;33m[0m[0m
[0;32m    519[0m         [1;31m# post-process response[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36m_open[1;34m(self, req, data)[0m
[0;32m    532[0m [1;33m[0m[0m
[0;32m    533[0m         [0mprotocol[0m [1;33m=[0m [0mreq[0m[1;33m.[0m[0mtype[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 534[1;33m         result = self._call_chain(self.handle_open, protocol, protocol +
[0m[0;32m    535[0m                                   '_open', req)
[0;32m    536[0m         [1;32mif[0m [0mresult[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36m_call_chain[1;34m(self, chain, kind, meth_name, *args)[0m
[0;32m    492[0m         [1;32mfor[0m [0mhandler[0m [1;32min[0m [0mhandlers[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    493[0m             [0mfunc[0m [1;33m=[0m [0mgetattr[0m[1;33m([0m[0mhandler[0m[1;33m,[0m [0mmeth_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 494[1;33m             [0mresult[0m [1;33m=[0m [0mfunc[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    495[0m             [1;32mif[0m [0mresult[0m [1;32mis[0m [1;32mnot[0m [1;32mNone[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    496[0m                 [1;32mreturn[0m [0mresult[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36mhttps_open[1;34m(self, req)[0m
[0;32m   1387[0m [1;33m[0m[0m
[0;32m   1388[0m         [1;32mdef[0m [0mhttps_open[0m[1;33m([0m[0mself[0m[1;33m,[0m [0mreq[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1389[1;33m             return self.do_open(http.client.HTTPSConnection, req,
[0m[0;32m   1390[0m                 context=self._context, check_hostname=self._check_hostname)
[0;32m   1391[0m [1;33m[0m[0m

[1;32mC:\ProgramData\Anaconda3\lib\urllib\request.py[0m in [0;36mdo_open[1;34m(self, http_class, req, **http_conn_args)[0m
[0;32m   1347[0m                           encode_chunked=req.has_header('Transfer-encoding'))
[0;32m   1348[0m             [1;32mexcept[0m [0mOSError[0m [1;32mas[0m [0merr[0m[1;33m:[0m [1;31m# timeout error[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1349[1;33m                 [1;32mraise[0m [0mURLError[0m[1;33m([0m[0merr[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1350[0m             [0mr[0m [1;33m=[0m [0mh[0m[1;33m.[0m[0mgetresponse[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1351[0m         [1;32mexcept[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;31mURLError[0m: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)>
URLError: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1129)>

